swagger: '2.0'
info:
  version: 1.0.0
  title: "Swagger Petstore"

tags: 
- name: "customer"
  description: "Customer Data"
- name: "employe"
  description: "mploye data"

schemes:
- "https"
- "http"

paths:
  /customer/getCust:
    get:
      tags:
      - "customer"
      summary: "get active customers"
      description: "Active customers"
      operationId: "getCust"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EmployeResponse"
  /customer/saveCustomer:
    post:
      tags:
      - "customer"
      summary: "Save new customer"
      description: "Save new Customer data"
      operationId: "saveCustomer"
      consumes:
      - "application/xml"
      - "application/json"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body" 
        name: "employe"  
        description: "New Employee"    
        schema:
          $ref: "#/definitions/Employe"
      
      responses:
        200:
          description: "After saving customer returning all cust"
          schema:
            $ref: "#/definitions/EmployeResponse"
        400:
          description: "Not found exception"

  /customer/findCustById/{custId}:      
     get:
      tags:
      - "customer"
      summary: "Find Customer by Id"
      description: "Find By customer By Id"
      operationId: findCustById
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "custId"
        in: "path"
        type: "string"
        required: true
        description: "Customer id in path variable"
      - name: "token"
        in: "header"
        type: "string"
        description: " User token info to validate the user"
      responses:
        200:
          description: " Customer Details for given id"
          schema:
            $ref: "#/definitions/Employe"
  /customer/findCustByType:      
     get:
      tags:
      - "customer"
      summary: "Find Customer by Type"
      description: "Find By customer By Type"
      operationId: findCustByType
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "custType"
        in: "query"
        required: true
        description: "Customer Type  in query parameter variable"
        schema: 
          type: "string"
          enum: ["Permanent","Contract"]
        
      responses:
        200:
          description: " Customer Details for given id"
          schema:
            $ref: "#/definitions/Employe"
  /employe:
    get:
      tags:
      - "employe"
      summary: "Find Customer by Id"
      description: "Find By customer By Id"
      operationId: findCustById
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "custId"
        in: "path"
        type: "string"
        description: "Customer id in path variable"
      response:
        200:
          description: " Customer Details for given id"
          schema:
            $ref: "#/definitions/Employe"
            
          
          
      


definitions:
  Employe:
    type: object
    properties:
      id:
       type: "string"
      name:
        type: "string"
      type:
        type: "string"
      
  EmployeResponse: 
    type: object
    properties:
      employeList:
        type: "array"
        items: 
          $ref: "#/definitions/Employe"
  

  
    

